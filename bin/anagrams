#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say);

use Getopt::Long  qw(GetOptions Configure);
use JSON::XS      qw(encode_json);
use Pod::Usage    qw(pod2usage);

my @LETTERS = ('a' .. 'z');

#-------------------------------------------------------------------------------
# Check arguments
#-------------------------------------------------------------------------------
my $TILES;

Configure("no_ignore_case");

GetOptions(
  'help|h'       => sub { pod2usage({ -verbose => 2, -exitval => 0 }) },
  'short-help|H' => sub { print "looks up the given words in the wordsetc dictionary"; exit 0 },
  'tiles|t=s'    => \$TILES,
) or pod2usage({ -verbose => 0, -exitval => 1 });

die "required: --tiles\n"
  unless defined $TILES;

die "Only characters a-zA-Z and ? are allowed\n"
  if $TILES =~ /[^a-zA-Z?]/;

die "A maximum of 3 wildcards is permitted\n"
  if ($TILES =~ tr/?//) > 3;

$TILES = uc $TILES;

#-------------------------------------------------------------------------------
# External dependencies
#-------------------------------------------------------------------------------
eval "use JSON::XS qw(encode_json decode_json)";
if ($@) {
  warn "This script requires the JSON::XS module.\n";
  warn "You can install it by running:\n";

  if (system("which cpanm >/dev/null") == 0) {
    warn "  cpanm JSON::XS\n";
  } else {
    warn "  cpan JSON::XS\n";
  }

  exit 1;
}

#-------------------------------------------------------------------------------
# Subroutines
#-------------------------------------------------------------------------------
sub sort_chars {
  join '', sort split //, $_[0];
}

sub expand_wildcards {
  my @queue = @_;
  my @results;

  while (my $input = shift @queue) {
    # Find the first wildcard in the string
    my $idx = index $input, '?';

    # If no wildcard is found, the string is done expanding. Add it to the
    # results and continue with the next string in the queue.
    if ($idx == -1) {
      push @results, $input;
      next;
    }

    # Otherwise, create a new string for each possible character that could
    # replace the wildcard, and add it to the queue.
    for my $char (@LETTERS) {
      substr($input, $idx, 1, $char);
      push @queue, $input;
    }
  }

  @results;
}

sub expand_subsets {
  my %subsets;

  while (defined(my $str = shift)) {
    my @queue = ("");

    for my $ch (split //, $str) {
      my $len = scalar @queue;

      for (my $i = 0; $i < $len; ++$i) {
        my $subset = $queue[$i];
        push @queue, $subset . $ch;
      }
    }

    $subsets{$_} = 1 for grep{ /./ } @queue;
  }

  keys %subsets;
}

sub expand {
  my $chars = sort_chars @_;

  # Expand wildcards
  my @expanded = expand_wildcards $chars;

  # Add all subsets of @sets
  my @sets = expand_subsets @expanded;

  my %seen;
  my @results;
  for my $set (@sets) {
    my $key = join('', sort{ uc($a) cmp uc($b) } split(//, $set));

    if ($seen{ uc($key) }++ == 0) {
      push @results, $key;
    }
  }

  # Sort each possibility by character, then return the results, also sorted.
  sort{ uc($a) cmp uc($b) }
    @results;
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
say for expand $TILES;

__DATA__

=head1 NAME

expand - generates all possible subsets of a set of letters, with ? as a wildcard

=head1 SYNOPSIS

expand --tiles foo
# Output: F, FO, FOO, O, OO, O

expand --tiles a?
# Output: a..z, Aa, Ab, Ac, ..., Az

=head1 OPTIONS

=over 4

=item B<--help>

Prints the help message.

=item B<--tiles | -t>

The string of tiles to use for the search. The tiles string may only include
characters a-zA-Z or ? for a blank tile/wildcard.

Expanded wildcards are lowercase, while scoring tiles are uppercase.

=back
