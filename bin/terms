#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say);

use Getopt::Long qw(GetOptions Configure);
use Pod::Usage qw(pod2usage);

use constant DICT => '/tmp/wordsetc.jsonl';

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
my $BOARD;

Configure("no_ignore_case");

GetOptions(
  'help|h'       => sub { pod2usage({ -verbose => 2, -exitval => 0 }) },
  'short-help|H' => sub { print "does a thing"; exit 0 },
  'board|b=s'    => \$BOARD,
) or pod2usage({ -verbose => 0, -exitval => 1 });

die "invalid: '$_' - the board pattern may only include a-zA-Z and _ for an empty space\n"
  if defined $BOARD
  && $BOARD !~ /^[_a-zA-Z]+$/;

die "invalid: '$_' - the board pattern must include at least one empty space\n"
  if defined $BOARD
  && $BOARD !~ /_/;

$BOARD = uc $BOARD;

#-------------------------------------------------------------------------------
# External dependencies
#-------------------------------------------------------------------------------
unless (-f DICT) {
  warn "The dictionary file is missing. You can create it by running:\n\n\twordsetc rebuild\n";
  exit 1;
}

#-------------------------------------------------------------------------------
# Subroutines
#-------------------------------------------------------------------------------
sub does_word_fit {
  my ($word, $start_pos, $row) = @_;
  my $word_length = length $word;
  my @new_key_chars;

  #-----------------------------------------------------------------------------
  # Check if the word fits within the row without overlapping non-matching
  # letters and track characters not on the board.
  #-----------------------------------------------------------------------------
  for (my $i = 0; $i < $word_length; ++$i) {
    my $row_char = $row->[$start_pos + $i] // ''; # edge case outside row bounds

    # If the character in the row is not an underscore and does not match the
    # word's character, the word does not fit.
    return if $row_char ne '_' && $row_char ne substr($word, $i, 1);

    # If the row character is an underscore, this character in the word is part
    # of the new key.
    push @new_key_chars, substr($word, $i, 1) if $row_char eq '_';
  }

  #-----------------------------------------------------------------------------
  # Ensure the word does not accidentally create a new word by extending
  # adjacent letters.
  #-----------------------------------------------------------------------------
  return if $start_pos > 0 && $row->[$start_pos - 1] ne '_';
  return if $start_pos + $word_length < @$row && $row->[$start_pos + $word_length] ne '_';

  #-----------------------------------------------------------------------------
  # If the word fits and we have tracked the characters not on the board, return
  # the new key constructed from these characters.
  #-----------------------------------------------------------------------------
  return join '', sort @new_key_chars; # Sort the characters to form the new key
}

sub does_word_fit_old {
  my ($word, $start_pos, $row) = @_;
  my $word_length = length $word;

  #-----------------------------------------------------------------------------
  # Check if the word fits within the row without overlapping non-matching
  # letters.
  #-----------------------------------------------------------------------------
  for (my $i = 0; $i < $word_length; ++$i) {
    my $row_char = $row->[$start_pos + $i] // ''; # edge case outside row bounds

    return
      if $row_char ne '_'
      && $row_char ne substr $word, $i, 1;
  }

  #-----------------------------------------------------------------------------
  # Ensure the word does not accidentally create a new word by extending
  # adjacent letters.
  #-----------------------------------------------------------------------------
  # Letter immediately before the word
  return
    if $start_pos > 0
    && $row->[$start_pos - 1] ne '_';

  # Letter immediately after the word
  return
    if $start_pos + $word_length < @$row
    && $row->[$start_pos + $word_length] ne '_';

  return 1;
}

sub is_legal_play {
  my ($word, $row) = @_;

  return 1 unless @$row;

  my $word_length = length $word;
  my $max_pos     = @$row - $word_length;

  for (my $i = 0; $i < $max_pos; ++$i) {
    if (my $key = does_word_fit($word, $i, $row)) {
      return $key;
    }
  }

  return;
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
my @row = split //, $BOARD // '';

open my $in, '<', '/tmp/wordsetc.jsonl'
  or die "Can't open dictionary: $!";

while (defined(my $line = <$in>)) {
  chomp $line;
  my ($key, $word, $json) = split /:/, $line, 3;

  if (my $subset_key = is_legal_play($word, \@row)) {
    say "$subset_key:$line";
  }
}
