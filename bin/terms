#!/usr/bin/env perl

use strict;
use warnings;
use feature       qw(say);
use Getopt::Long  qw(GetOptions Configure);
use Pod::Usage    qw(pod2usage);

use constant DICT => '/tmp/wordsetc.jsonl';

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
my $BOARD;

Configure("no_ignore_case");

GetOptions(
  'help|h'       => sub { pod2usage({ -verbose => 2, -exitval => 0 }) },
  'short-help|H' => sub { print "does a thing"; exit 0 },
  'board|b=s'    => \$BOARD,
) or pod2usage({ -verbose => 0, -exitval => 1 });

die "invalid: '$_' - the board pattern may only include a-zA-Z and _ for an empty space\n"
  if defined $BOARD
  && $BOARD !~ /^[_a-zA-Z]+$/;

die "invalid: '$_' - the board pattern must include at least one empty space\n"
  if defined $BOARD
  && $BOARD !~ /_/;

$BOARD = uc $BOARD;

#-------------------------------------------------------------------------------
# External dependencies
#-------------------------------------------------------------------------------
unless (-f DICT) {
  warn "The dictionary file is missing. You can create it by running:\n\n\twordsetc rebuild\n";
  exit 1;
}

#-------------------------------------------------------------------------------
# Subroutines
#-------------------------------------------------------------------------------
sub does_word_fit {
  my $word      = shift;
  my $board     = shift;
  my $board_len = length $board;
  my $word_len  = length $word;

  # Generate all possible positions the word could start
  POSITION:
  for my $start_pos (0 .. $board_len - $word_len) {
    my $end_pos = $start_pos + $word_len - 1;
    my @required_letters;

    # Check if word fits, considering existing letters and empty spaces
    for my $i (0 .. $word_len - 1) {
      my $board_char = substr $board, $start_pos + $i, 1;
      my $word_char  = substr $word, $i, 1;

      # Collect required letters (those that fill in blanks)
      push @required_letters, $word_char
        if $board_char eq '_';

      # If board position is not empty and does not match the word character,
      # skip this position.
      next POSITION
        if $board_char ne '_'
        && $board_char ne $word_char;
    }

    # Invalid if there's a letter immediately before the word
    next
      if $start_pos > 0
      && substr($board, $start_pos - 1, 1) ne '_';

    # Invalid if there's a letter immediately after the word
    next
      if $end_pos < $board_len - 1
      && substr($board, $end_pos + 1, 1) ne '_';


    # If passed all checks, return the required letters
    return join '', sort @required_letters;
  }

  return;
}

sub main {
  open my $in, '<', '/tmp/wordsetc.jsonl'
      or die "Can't open dictionary: $!";

  while (defined(my $line = <$in>)) {
    chomp $line;

    my ($key, $word, $json) = split /:/, $line, 3;

    if (defined(my $tiles = does_word_fit($word, $BOARD))) {
      say "$tiles:$line";
    }
  }

  close $in;
}

main;
