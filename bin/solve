#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say state);

use FindBin qw();
use Getopt::Long qw(GetOptions Configure);
use Pod::Usage qw(pod2usage);

use constant DICT => '/tmp/wordsetc.jsonl';
use constant BIN  => "$FindBin::Bin/../bin/wordsetc";

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
my $TILES;
my $BOARD;

Configure("no_ignore_case");

GetOptions(
  'help|h'       => sub { pod2usage({ -verbose => 2, -exitval => 0 }) },
  'short-help|H' => sub { print "does a thing"; exit 0 },
  'tiles|t=s'    => \$TILES,
  'board|b=s'    => \$BOARD,
) or pod2usage({ -verbose => 0, -exitval => 1 });

die "required: --tiles\n"
  unless defined $TILES;

die "invalid: '$TILES' - tiles may only include a-zA-Z and ? (blank tile)\n"
  if $TILES !~ /^[\?a-zA-Z]+$/;

die "A maximum of 3 wildcards is permitted\n"
  if ($TILES =~ tr/?//) > 3;

die "invalid: '$_' - the board pattern may only include a-zA-Z and _ for an empty space\n"
  if defined $BOARD
  && $BOARD !~ /^[_a-zA-Z]+$/;

die "invalid: '$_' - the board pattern must include at least one empty space\n"
  if defined $BOARD
  && $BOARD !~ /_/;

#-------------------------------------------------------------------------------
# External dependencies
#-------------------------------------------------------------------------------
unless (-f DICT) {
  warn "The dictionary file is missing. You can create it by running:\n\n\twordsetc rebuild\n";
  exit 1;
}

#-------------------------------------------------------------------------------
# Subroutines
#-------------------------------------------------------------------------------
sub words {
  my $tiles = shift;

  open my $fh, '-|', BIN . " anagrams --tiles '$tiles'"
    or die "Can't open pipe to wordsetc: $!";

  return sub{
    if (defined(my $word = <$fh>)) {
      chomp $word;
      return $word;
    }

    return;
  };
}

#-------------------------------------------------------------------------------
# Uses `terms` to filter the dictionary for entries that fit the user's board.
# `terms` prepends a "subkey" of the characters in the word, less the
# characters being used from the board, to each line. This allows us to use a
# simple match against the key built from the user's tiles to match the word to
# the line.
#-------------------------------------------------------------------------------
sub search_with_board {
  my $needle = shift;
  my $board  = shift;

  state %terms = do{
    my %terms;

    open my $fh, '-|', BIN . " terms --board '$board'"
      or die "Can't open pipe to wordsetc: $!";

    while (defined(my $line = <$fh>)) {
      chomp $line;

      # Extract the char-sorted word key from the line
      my ($key) = $line =~ /^([^:]+)/;

      $terms{$key} = $line;
    }

    close $fh;

    %terms;
  };

  my @matches = map{ $terms{$_} } grep{ /^$needle$/ } keys %terms;
  return \@matches if @matches;
  return;
}

#-------------------------------------------------------------------------------
# Binary search for the word in the dictionary. Prepends the word key to the
# line, despite it being duplication of the key already prepended to the line
# when the dictionary is built, to match the output of `search_with_board` (see
# comments in that subroutine).
#-------------------------------------------------------------------------------
sub search_without_board {
  my $needle = shift;
  my @matches;

  open my $fh, '<', DICT
    or die "Can't open " . DICT . ": $!";

  if (defined(seek_to_first_match($fh, uc($needle)))) {
    while (defined(my $line = <$fh>)) {
      if ($line =~ /^$needle:/i) {
        chomp $line;
        push @matches, "$needle:$line";
      }
    }
  }

  close $fh;

  return \@matches if @matches;
  return;
}

sub seek_to_first_match {
  my ($fh, $target) = @_;

  seek $fh, 0, 0;                                  # Seek to the start of the file for safety

  my $left = 0;                                    # Set the left boundary
  my $right = -s $fh;                              # Set the right boundary to the size of the file
  my $first_line_pos;                              # Initialize the position of the first line

  while ($left <= $right) {                        # While the left boundary is less than or equal to the right boundary
    my $mid = int(($left + $right) / 2);           #   Find the middle of the file
    seek $fh, $mid, 0;                             #   ...seek to the middle of the file
    <$fh> if $mid > 0;                             #   ...skip partial line if not at the start of the file

    my $line = <$fh>;                              #   Read the line at the current position, seeking to the the next line

    if (defined $line && $line =~ /^$target:/) {   #   If the line matches the target:
      $first_line_pos = tell($fh) - length($line); #   ...save the position of the first line
      $right = $mid - 1;                           #   ...keep moving backward
    }
    elsif (defined $line && $line lt $target) {    #   If the line is less than the target:
      $left = tell($fh);                           #   ...keep moving forward
    }
    else {                                         #   If the line is greater than the target:
      $right = $mid - 1;                           #   ...keep moving backward
    }
  }

  return $first_line_pos;
}

sub search {
  my $needle = shift;
  my $board  = shift;

  if (defined $board) {
    search_with_board($needle, $board);
  } else {
    search_without_board($needle);
  }
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
my $words = words($TILES);

while (defined(my $key = $words->())) {
  if (defined(my $lines = search($key, $BOARD))) {
    say for @$lines;
  }
}

__DATA__

=head1 NAME

solve - finds sorted word keys in the dictionary

=head1 SYNOPSIS

wordsetc solve TILES_STRING

=head1 OPTIONS

=over 4

=item B<--help | -h>

Prints a brief help message and exits.

=item B<--tiles | -t>

The string of tiles to use for the search. The tiles string may only include
characters a-zA-Z or ? for a blank tile/wildcard.

=item B<--board | -b>

The board pattern to use for the search. The board pattern may only include
characters a-zA-Z or _ for an empty space. The board pattern must include at
least one empty space.

=back

=cut
